--[[
Repair Kit for CoP - Misery 2
by fluffy22 GSC Forums, ModDB
]]

local repair_amount = 0.5
local repair_threshold = 0.8

function use(obj)
	if obj:section() == "repair_kit" then
		RepairKit():ShowDialog(true)
	end
end


class "RepairKit" (CUIScriptWnd)
function RepairKit:__init() super()
	get_hud():HideActorMenu()
	self:init_interface()
	self:init_callbacks()
	self:init_status()
end

function RepairKit:__finalize() 
end

function RepairKit:init_interface()
	local xml = CScriptXmlInit()
	xml:ParseFile("repair_kit.xml")
	
	self.background = xml:InitStatic("window",self)
	self:SetWndPos(vector2():set(269,150))
	self:SetWndSize(vector2():set(self.background:GetWidth(),self.background:GetHeight()))
	self.background:SetWndPos(vector2():set(0,0))
	
	xml:InitFrame("frame_secondary_weapon",self)
	xml:InitFrame("frame_primary_weapon",self)
	xml:InitFrame("frame_helmet",self)
	xml:InitFrame("frame_suit",self)
	
	self.secondary_icon = xml:InitStatic("static_secondary_weapon", self)
	self.primary_icon = xml:InitStatic("static_primary_weapon", self)
	self.helmet_icon = xml:InitStatic("static_helmet", self)
	self.suit_icon = xml:InitStatic("static_suit", self)
	
	self.secondary_condition = xml:InitStatic("static_condition_secondary", self)
	self.primary_condition = xml:InitStatic("static_condition_primary", self)
	self.helmet_condition = xml:InitStatic("static_condition_helmet", self)
	self.suit_condition = xml:InitStatic("static_condition_suit", self)
	
	self.button_repair_secondary = xml:Init3tButton("button_repair_secondary", self)
	self.button_repair_primary = xml:Init3tButton("button_repair_primary", self)
	self.button_repair_helmet = xml:Init3tButton("button_repair_helmet", self)
	self.button_repair_suit = xml:Init3tButton("button_repair_suit", self)
	
	self:Register(self.button_repair_secondary, "button_repair_secondary")
	self:Register(self.button_repair_primary, "button_repair_primary")
	self:Register(self.button_repair_helmet, "button_repair_helmet")
	self:Register(self.button_repair_suit, "button_repair_suit")
	
	self.button_quit = xml:Init3tButton("button_quit", self.background)
	self:Register(self.button_quit, "button_quit")
end

function RepairKit:init_callbacks()
	self:AddCallback("button_repair_secondary",	ui_events.BUTTON_CLICKED, 	self.repair_secondary,	self)
	self:AddCallback("button_repair_primary",	ui_events.BUTTON_CLICKED, 	self.repair_primary,	self)
	self:AddCallback("button_repair_helmet",	ui_events.BUTTON_CLICKED, 	self.repair_helmet,		self)
	self:AddCallback("button_repair_suit",		ui_events.BUTTON_CLICKED, 	self.repair_suit,		self)
	self:AddCallback("button_quit",  			ui_events.BUTTON_CLICKED, 	self.cancel,  			self)
end

function RepairKit:init_status()
    self.secondary = db.actor:item_in_slot(2)
    self.primary = db.actor:item_in_slot(3)
    self.suit = db.actor:item_in_slot(7)
    self.helmet = db.actor:item_in_slot(12)
	
	update_slot(self.secondary,	self.secondary_condition,	self.secondary_icon,	self.button_repair_secondary)
	update_slot(self.primary,	self.primary_condition,		self.primary_icon,		self.button_repair_primary)
	update_slot(self.suit,		self.suit_condition,		self.suit_icon,			self.button_repair_suit)
	update_slot(self.helmet,	self.helmet_condition,		self.helmet_icon,		self.button_repair_helmet)
end	

function update_slot(item, status, icon, button)
	if item ~= nil then
		status:TextControl():SetTextST("Condition: "..string.format("%02d", tostring(item:condition()*100)).."%")
		icon:InitTexture("ui_"..item:section().."_icon")
	else
		status:TextControl():SetTextST("0%")
		button:Enable(false)
	end
	AutoDisableButton(item, button)
end

function AutoDisableButton(item, button)
	if item ~= nil and item:condition() >= repair_threshold then
		button:Enable(false)
	end
end

function RepairKit:repair_generic(item)
	if item ~= nil and item:condition() < repair_threshold then
		local con = item:condition() + repair_amount
		if con > repair_threshold then
			con = repair_threshold
		end
		item:set_condition(con) 
		self:ui_quit()
	end
end

function RepairKit:repair_secondary()
	self:repair_generic(self.secondary)
end

function RepairKit:repair_primary()
	self:repair_generic(self.primary)
end

function RepairKit:repair_helmet()
	self:repair_generic(self.helmet)
end

function RepairKit:repair_suit()
	self:repair_generic(self.suit)
end

function RepairKit:OnKeyboard(DIK, KeyboardAction)
	CUIScriptWnd.OnKeyboard(self, DIK, KeyboardAction)
	if KeyboardAction == ui_events.WINDOW_KEY_PRESSED then
		if DIK == DIK_keys.DIK_ESCAPE then
			self:cancel()
		end
	end
	return true
end

function RepairKit:ui_quit()
	self:HideDialog()
end

function RepairKit:cancel()
	local act = db.actor
	alife():create("repair_kit", act:position(), act:level_vertex_id(), act:game_vertex_id(), act:id())
	self:ui_quit()
end
